<?php

declare(strict_types=1);

namespace Tests;

use Aoc\BinaryBoarding\Parser;
use Aoc\BinaryBoarding\SeatCalculator;
use Aoc\BinaryBoarding\SeatDivider;
use PHPUnit\Framework\TestCase;

class BinaryBoardingTest extends TestCase
{
    private string $instruction;
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->instruction = 'FBFBBFFRLR';
    }

    public function testParseInstructions(): void
    {
        $parser = new Parser($this->instruction);

        $this->assertSame(['F', 'B', 'F', 'B', 'B', 'F', 'F'], $parser->rows());
        $this->assertSame([ 'R', 'L', 'R'], $parser->seats());
    }

    public function testParseTranslatedInstructions(): void
    {
        $parser = new Parser($this->instruction);

        $this->assertSame([true, false, true, false, false, true, true], $parser->rowsAsInstruction());
        $this->assertSame([ false, true, false], $parser->seatsAsInstruction());
    }

    public function testRowCalculation(): void
    {
        $rows = (new Parser($this->instruction))->rowsAsInstruction();

        $calculator = new SeatDivider();
        $this->assertEquals(44, $calculator->calculate(127, $rows));
    }

    public function testColCalculation(): void
    {
        $cols = (new Parser($this->instruction))->seatsAsInstruction();

        $calculator = new SeatDivider();
        $this->assertEquals(5, $calculator->calculate(7, $cols));
    }

    public function testSeatCalculator(): void
    {
        $seatCalculator = new SeatCalculator(new Parser($this->instruction), new SeatDivider());

        $this->assertEquals(357, $seatCalculator->calculate());
    }

    public function testSeatCalculatorAssertions(): void
    {
        $assertions = [
            "BFFFBBFRRR" => 567,
            "FFFBBBFRRR" => 119,
            "BBFFBBFRLL" => 820,
        ];

        foreach ($assertions as $instructions => $expect) {
            $seatCalculator = new SeatCalculator(new Parser($instructions), new SeatDivider());
            $this->assertEquals($expect, $seatCalculator->calculate());
        }
    }
}
