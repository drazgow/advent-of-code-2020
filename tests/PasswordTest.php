<?php
declare(strict_types=1);

namespace Tests;

use Aoc\Password\Counter;
use Aoc\Password\LetterPositionsValidator;
use Aoc\Password\Parser;
use Aoc\Password\LetterOccurrencesValidator;
use PHPUnit\Framework\TestCase;

class PasswordTest extends TestCase
{
    private array $passwords = [];

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->passwords = [
            "1-3 a: abcde",
            "1-3 b: cdefg",
            "2-9 c: ccccccccc"
        ];
    }

    public function testParser()
    {
        $parser = new Parser();
        $result = $parser->parse("1-3 a: abcde");
        $this->assertSame([[1,3], 'a', "abcde"], $result);
    }

    public function testValidPassword()
    {
        $validator = new LetterOccurrencesValidator();
        $this->assertTrue($validator->validate([1,3], 'a', "abcde"));
    }

    public function testInvalidPassword()
    {
        $validator = new LetterOccurrencesValidator();
        $this->assertFalse($validator->validate([1,3], 'b', "cdefg"));
    }

    public function testValidPasswordWhenOneLetterInPosition()
    {
        $validator = new LetterPositionsValidator();
        $this->assertTrue($validator->validate([1,3], 'a', "abcde"));
    }

    public function testInvalidPasswordWhenNoLettersInPositions()
    {
        $validator = new LetterPositionsValidator();
        $this->assertFalse($validator->validate([1,3], 'b', "cdefg"));
    }

    public function testInvalidPasswordWhenTwoLettersInPositions()
    {
        $validator = new LetterPositionsValidator();
        $this->assertFalse($validator->validate([2,9], 'c', "ccccccccc"));
    }

    public function testCounter()
    {
        $counter = new Counter($this->passwords, new Parser(), new LetterOccurrencesValidator());
        $this->assertSame(2, $counter->count());
    }

    public function testCounterWithPositons()
    {
        $counter = new Counter($this->passwords, new Parser(), new LetterPositionsValidator());
        $this->assertSame(1, $counter->count());
    }


}
